功能一：添加时间
package time;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;

//import com.yychat.model.Message;
//import com.yychatclient.controller.ClientConnect;

public class Showtime extends JFrame implements ActionListener{
	JButton jb;
	JTextArea jta;
	JPanel jp;
	public Showtime(){
		jb=new JButton("显示时间");
		
		jb.addActionListener(this);
		
		jp=new JPanel();
		jta=new JTextArea();
		jp.add(jb);
		this.add(jp);
		this.add(jta);
		this.add(jp,"South");
		

		this.setSize(350,240);//设置窗口大小
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setVisible(true);	
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Showtime showtime=new Showtime();
	}
	

	@Override
		public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource()==jb) {
			//public String save()throws Exception{
				String time =new SimpleDateFormat("yyyy-mm-dd-hh:mm:ss").format(new java.util.Date());
				 jta.append(time+"\r\n");
		//	}
	}

}
}


功能二：响铃

public class Call{
	public static void main (String[] args){
		new Thread(new PlayAudio()).start();
	}
}




import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.NoPlayerException;
import javax.media.Player;


public class PlayAudio implements Runnable{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		String path=new String();
		File directory=new File("");
		try{
			path=directory.getCanonicalPath();
		}catch(IOException e2){
			e2.printStackTrace();
		}
		path=path+"\\sound\\yychat提示音.mp3";
		path=path.replace("\\","/");
		path="file:///"+path;
		
		URL url=null;
		try{
			url=new URL(path);
		}catch(MalformedURLException e1){
			e1.printStackTrace();
		}
		MediaLocator ml=null;
		ml=new MediaLocator(url);
		Player player=null;
		try{
			player=Manager.createPlayer(ml);
		}catch(NoPlayerException e){
			e.printStackTrace();	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		player.prefetch();
		player.start();
		//让线程睡眠1秒
		try{
			Thread.sleep(1000);
		}catch(InterruptedException e){
			e.printStackTrace();
		}
		player.stop();
		player.close();
	}
	
	
	
}


功能三：截屏
package Jieping;

import java.io.File;

import java.io.*;

import java.net.*;

import javax.swing.*;

import java.awt.*;

import java.awt.event.*;

import java.awt.image.*;

import javax.imageio.*;

import java.io.*;

public class ScreenCapture {

//test main

	public static void main(String[] args) throws Exception{
			String userdir=System.getProperty("user.dir");
			File tempFile=new File("e:","Sounds.新功能.temp.png");
			ScreenCapture capture=ScreenCapture.getInstance();	
			capture.captureImage();

			JFrame frame = new JFrame();
			
			JPanel panel = new JPanel();
			
			panel.setLayout(new BorderLayout());
			
			JLabel imagebox = new JLabel();
			
			panel.add(BorderLayout.CENTER,imagebox);
			
			imagebox.setIcon(capture.getPickedIcon());
			
			capture.saveToFile(tempFile);
			
			capture.captureImage();
			
			imagebox.setIcon(capture.getPickedIcon());
			
			frame.setContentPane(panel);
			
			frame.setSize(400,300);
			
			frame.show();
			
			System.out.println("Over");
			
}
		private ScreenCapture() {
	
			try{
	
			robot = new Robot();
	
			}
	
			catch(AWTException e) {
	
			System.err.println("Internal Error: " + e);
	
			e.printStackTrace();
	
			}
	
			JPanel cp = (JPanel)dialog.getContentPane();
	
			cp.setLayout(new BorderLayout());
	
			labFullScreenImage.addMouseListener(new MouseAdapter() {
	
			public void mouseReleased(MouseEvent evn) {
	
			isFirstPoint = true;
	
			pickedImage = fullScreenImage.getSubimage(recX,recY,recW,recH);
	
			dialog.setVisible(false);
	
			}
	
			});
	
			labFullScreenImage.addMouseMotionListener(new MouseMotionAdapter() {
	
			public void mouseDragged(MouseEvent evn) {
	
			if(isFirstPoint) {
	
			x1 = evn.getX();
	
			y1 = evn.getY();
	
			isFirstPoint = false;
	
			}
	
			else {
	
			x2 = evn.getX();
	
			y2 = evn.getY();
	
			int maxX = Math.max(x1,x2);
	
			int maxY = Math.max(y1,y2);
	
			int minX = Math.min(x1,x2);
	
			int minY = Math.min(y1,y2);
	
			recX = minX;
	
			recY = minY;
	
			recW = maxX-minX;
	
			recH = maxY-minY;
	
			labFullScreenImage.drawRectangle(recX,recY,recW,recH);
	
			}
	
			}
	
			public void mouseMoved(MouseEvent e) {
	
			labFullScreenImage.drawCross(e.getX(),e.getY());
	
			}
	
			});
	
			cp.add(BorderLayout.CENTER,labFullScreenImage);
	
			dialog.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
	
			dialog.setAlwaysOnTop(true);
	
			dialog.setMaximumSize(
	
			Toolkit.getDefaultToolkit().getScreenSize());
	
			dialog.setUndecorated(true);
	
			dialog.setSize(dialog.getMaximumSize());
	
			dialog.setModal(true);
	
			}
	
			//Singleton Pattern
	
			public static ScreenCapture getInstance() {
	
			return defaultCapturer;
	
			}
	
			/**捕捉全屏慕*/
	
			public Icon captureFullScreen() {
	
			fullScreenImage = robot.createScreenCapture(new Rectangle(
	
			Toolkit.getDefaultToolkit().getScreenSize()));
	
			ImageIcon icon = new ImageIcon(fullScreenImage);
	
			return icon;
	
			}
	
			/**捕捉屏幕的一个矫形区域
	
			*/
	
			public void captureImage() {
	
			fullScreenImage = robot.createScreenCapture(new Rectangle(
	
			Toolkit.getDefaultToolkit().getScreenSize()));
	
			ImageIcon icon = new ImageIcon(fullScreenImage);
	
			labFullScreenImage.setIcon(icon);
	
			dialog.setVisible(true);
	
			}
	
			
			/**得到捕捉后的BufferedImage*/
	
			public BufferedImage getPickedImage() {
	
			return pickedImage;
	
			}
	
			/**得到捕捉后的Icon*/
	
			public ImageIcon getPickedIcon() {
	
			return new ImageIcon(getPickedImage());
	
			}
	
			/**储存为一个文件,为PNG格式
	
			*@deprecated
	
			*replaced by saveAsPNG(File file)
	
			**/
	
			@Deprecated
	
			public void saveToFile(File file) throws IOException{
	
			ImageIO.write(getPickedImage(),defaultImageFormater,file);
	
			}
	
			/**储存为一个文件,为PNG格式*/
	
			public void saveAsPNG(File file) throws IOException {
	
			ImageIO.write(getPickedImage(),"png",file);
	
			}
	
			/**储存为一个JPEG格式图像文件*/
	
			public void saveAsJPEG(File file) throws IOException {
	
			ImageIO.write(getPickedImage(),"JPEG",file);
	
			}
	
			/**写入一个OutputStream*/
	
			public void write(OutputStream out) throws IOException{
	
			ImageIO.write(getPickedImage(),defaultImageFormater,out);
	
			}
	
			//singleton design pattern
	
			private static ScreenCapture defaultCapturer = new ScreenCapture();
	
			private int x1,y1,x2,y2;
	
			private int recX,recY,recH,recW; //截取的图像
	
			private boolean isFirstPoint = true;
	
			private BackgroundImage labFullScreenImage = new BackgroundImage();
	
			private Robot robot;
	
			private BufferedImage fullScreenImage;
	
			private BufferedImage pickedImage;
	
			private String defaultImageFormater = "png";
	
			private JDialog dialog = new JDialog();
	
			}
	
			/**显示图片的Label*/
	
			class BackgroundImage extends JLabel{
	
			public void paintComponent(Graphics g) {
	
			super.paintComponent(g);
	
			g.drawRect(x,y,w,h);
	
			String area = Integer.toString(w)+" * "+ Integer.toString(h);
	
			g.drawString(area,x+(int)w/2-15,y+(int)h/2);
	
			g.drawLine(lineX,0,lineX,getHeight());
	
			g.drawLine(0,lineY,getWidth(),lineY);
	
			}
	
			public void drawRectangle(int x,int y,int width,int height) {
	
			this.x = x;
	
			this.y = y;
	
			h = height;
	
			w = width;
	
			repaint();
	
			}
	
			public void drawCross(int x,int y) {
	
			lineX = x;
	
			lineY = y;
	
			repaint();
	
			}
			int lineX,lineY;
			int x,y,h,w;
			}
		

功能四：查看好友消息

功能五：贪吃蛇
类GreedSnake
package tang;

//import PlayAudio;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

import java.util.*;

//Main Class

public class GreedSnake extends KeyAdapter {

    JFrame mainFrame;

    Canvas paintCanvas;

    JLabel labelScore;// 计分牌

    SnakeModel snakeModel = null;// 蛇

    public static final int DEFAULT_WIDTH = 500;

    public static final int DEFAULT_HEIGHT = 300;

    public static final int nodeWidth = 10;

    public static final int nodeHeight = 10;
    
    

    // GreedSnake():初始化游戏界面

    public GreedSnake() {
        
        // 设置界面元素
        mainFrame = new JFrame("贪吃蛇游戏");
        Container cp = mainFrame.getContentPane();
        mainFrame.setBounds(600,400,400,300);
        //得分牌
        labelScore = new JLabel("所得分数为:", JLabel.CENTER);
        cp.add(labelScore, BorderLayout.NORTH);
        //画布
        paintCanvas = new Canvas();
        paintCanvas.setSize(DEFAULT_WIDTH + 1, DEFAULT_HEIGHT + 1);
        paintCanvas.addKeyListener(this);
        cp.add(paintCanvas, BorderLayout.CENTER);
        JPanel panelButtom = new JPanel();
        panelButtom.setLayout(new BorderLayout());
        JLabel labelHelp;
        // 帮助信息
        labelHelp = new JLabel("按 PageUP 或 PageDown 键改变速度", JLabel.CENTER);
        panelButtom.add(labelHelp, BorderLayout.NORTH);
        labelHelp = new JLabel("按 Enter 或 S 键重新开始游戏", JLabel.CENTER);
        panelButtom.add(labelHelp, BorderLayout.CENTER);
        labelHelp = new JLabel("按 SPACE 键或 P 键暂停游戏", JLabel.CENTER);
        panelButtom.add(labelHelp, BorderLayout.SOUTH);
        cp.add(panelButtom, BorderLayout.SOUTH);
        mainFrame.addKeyListener(this);
        mainFrame.pack();
        mainFrame.setResizable(false);// 设置窗口大小不能变化
        //窗口监听器
        mainFrame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                snakeModel.s.stop();
                mainFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
        });
        mainFrame.setVisible(true);
        begin();
        
    }
    
    // keyPressed():按键检测

    public void keyPressed(KeyEvent e) {

        int keyCode = e.getKeyCode();//得到按键的值
        
        if (snakeModel.running)//在蛇运动时生效
            switch ( e.getKeyCode()) {
            //改变方向
            case KeyEvent.VK_UP:
                snakeModel.changeDirection(SnakeModel.UP);
                break;
            case KeyEvent.VK_DOWN:
                snakeModel.changeDirection(SnakeModel.DOWN);
                break;
            case KeyEvent.VK_LEFT:
                snakeModel.changeDirection(SnakeModel.LEFT);
                break;
            case KeyEvent.VK_RIGHT:
                snakeModel.changeDirection(SnakeModel.RIGHT);
                break;
            //改变速度
            case KeyEvent.VK_ADD:
            case KeyEvent.VK_PAGE_UP:
                snakeModel.speedUp();// 加速
                break;
            case KeyEvent.VK_SUBTRACT:
            case KeyEvent.VK_PAGE_DOWN:
                snakeModel.speedDown();// 减速
                break;
            //改变暂停或继续状态
            case KeyEvent.VK_SPACE:
            case KeyEvent.VK_P:
                snakeModel.changePauseState();// 暂停或继续
                break;
            default:
            }
        // 重新开始
        if (keyCode == KeyEvent.VK_S || keyCode == KeyEvent.VK_ENTER) {
            snakeModel.running = false;
            begin();
        }
    }

    // repaint（）：绘制游戏界面（包括蛇和食物）

    void repaint() {
        
    
        Graphics g = paintCanvas.getGraphics();
        // 加载背景
        g.drawImage(new ImageIcon("images\\q1.jpg").getImage(), 0, 0,
                DEFAULT_WIDTH, DEFAULT_HEIGHT, null);
        // 画出蛇
        g.setColor(Color.BLACK);
        LinkedList<Node> na = snakeModel.nodeArray;
        Iterator<Node> it = na.iterator();
        
        while (it.hasNext()) {
            Node n = (Node) it.next();
            drawNode(g, n);
        }
        // 画出食物
        g.setColor(Color.RED);
        Node n = snakeModel.food;
        drawNode(g, n);
        updateScore();
    }

    // drawNode（）：绘画某一结点（蛇身或食物）

    private void drawNode(Graphics g, Node n) {
        g.fillRect(n.x * nodeWidth, n.y * nodeHeight, nodeWidth - 1, nodeHeight - 1);
    }

    // updateScore（）：改变计分牌

    public void updateScore() {
        String s = "所得分数为: " + snakeModel.score;
        labelScore.setText(s);//将得分设置到得分版
    }

    // begin（）：游戏开始，放置贪吃蛇

    void begin() {

        if (snakeModel == null || !snakeModel.running) {
            //启动贪吃蛇
            snakeModel = new SnakeModel(this, DEFAULT_WIDTH / nodeWidth, DEFAULT_HEIGHT / nodeHeight);
            (new Thread(snakeModel)).start();
        }
    }
    


    
}

/**
 * 节点类
 * @author HP
 *
 */
class Node {
    int x;

    int y;
//初始化
    Node(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

/**
 * SnakeModel:贪吃蛇模型
 * 
 */ 

class SnakeModel implements Runnable {

    GreedSnake gs;

    boolean[][] matrix;// 界面数据保存在数组里

    LinkedList<Node> nodeArray = new LinkedList<Node>();

    Node food;

    int maxX;// 最大宽度

    int maxY;// 最大长度

    int direction = 2;// 方向

    boolean running = false;

    int timeInterval = 200;// 间隔时间（速度）

    double speedChangeRate = 0.75;// 速度改变程度

    boolean paused = false;// 游戏状态

    int score = 0;

    int countMove = 0;

    // UP和DOWN是偶数，RIGHT和LEFT是奇数
    public static final int UP = 2;

    public static final int DOWN = 4;

    public static final int LEFT = 1;

    public static final int RIGHT = 3;
    
    Sound s=new Sound();

    
    // 初始化界面

    public SnakeModel(GreedSnake gs, int maxX, int maxY) {

        this.gs = gs;
        this.maxX = maxX;
        this.maxY = maxY;
        matrix = new boolean[maxX][];
        for (int i = 0; i < maxX; ++i) {
            matrix[i] = new boolean[maxY];
            Arrays.fill(matrix[i], false);// 没有蛇和食物的地区置false
        }
        // 初始化贪吃蛇
        int initArrayLength = maxX > 20 ? 10 : maxX / 2;
        for (int i = 0; i < initArrayLength; ++i) {
            int x = maxX / 2 + i;
            int y = maxY / 2;
            nodeArray.addLast(new Node(x, y));
            matrix[x][y] = true;// 蛇身处置true
        }
        food = createFood();
        matrix[food.x][food.y] = true;// 食物处置true
    }

    // 改变运动方向

    public void changeDirection(int newDirection) {
        //上与下都为偶数，左与右都为奇数，若方向的值除以2的余数相等，则方向冲突
        if (direction % 2 != newDirection % 2) {// 避免冲突
            direction = newDirection;
        }
    }

    // 贪吃蛇运动函数

    public boolean moveOn() {

        Node n = (Node) nodeArray.getFirst();//头node确定方向
        int x = n.x;
        int y = n.y;
        //头node的移动
        switch (direction) {
        case UP:
            y--;
            break;
        case DOWN:
            y++;
            break;
        case LEFT:
            x--;
            break;
        case RIGHT:
            x++;
            break;
        }
        
        if ((0 <= x && x < maxX) && (0 <= y && y < maxY)) {

            if (matrix[x][y]) {// 吃到食物或者撞到身体

                if (x == food.x && y == food.y) {// 吃到食物

                    nodeArray.addFirst(food);// 在头部加上一结点
                    // 计分规则与移动长度和速度有关
                    int scoreGet = (10000 - 200 * countMove) / timeInterval;
                    score += (scoreGet > 0 ? scoreGet : 10);
                    countMove = 0;
                    food = createFood();
                    matrix[food.x][food.y] = true;
                    return true;
                } else
                    return false;// 撞到身体
            } else {// 什么都没有碰到
                nodeArray.addFirst(new Node(x, y));// 加上头部
                matrix[x][y] = true;
                n = (Node) nodeArray.removeLast();// 去掉尾部
                matrix[n.x][n.y] = false;
                countMove++;
                return true;
            }
        }
        return false;// 越界（撞到墙壁）
    }

    // run():贪吃蛇运动线程
    
    public void run() {
        running = true;
        
        s.play();
        while (running) {
            
            try {
                Thread.sleep(timeInterval);
            } catch (Exception e) {
                s.stop();
                break;
            }
            if (!paused) {

                if (moveOn()) {// 未结束
                    gs.repaint();
                } else {// 游戏结束
                    s.stop();
                    JOptionPane.showMessageDialog(null, "GAME OVER", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            }else{
//              s.stop();
            }
        }
        running = false;
    }

    // createFood():生成食物及放置地点

    private Node createFood() {

        int x = 0;
        int y = 0;
        do {
            Random r = new Random();
            x = r.nextInt(maxX);
            y = r.nextInt(maxY);
        } while (matrix[x][y]);
        return new Node(x, y);
    }

    // speedUp():加快蛇运动速度

    public void speedUp() {
        timeInterval *= speedChangeRate;
    }

    // speedDown():放慢蛇运动速度

    public void speedDown() {

        timeInterval /= speedChangeRate;
    }

    // changePauseState(): 改变游戏状态（暂停或继续）

    public void changePauseState() {
        if(paused){
            s.play();
        }else{
            s.stop();
        }
        paused = !paused;
    }
   // public static void main (String[] args){
		//GreedSnake gs=new GreedSnake();
	//}
    
}
类Soound
package tang;

import java.applet.AudioClip;
import java.net.MalformedURLException;
import java.net.URL;

import javax.swing.JApplet;

public class Sound{  
      AudioClip christmas = loadSound("sounds\\贪吃蛇.wav");
        public static AudioClip loadSound(String filename) {  
            URL url = null;  
           try {  
                url = new URL("file:" + filename);  
            }   
            catch (MalformedURLException e) {;}  
           return JApplet.newAudioClip(url);  
       }  
       public void play() {  
          
            christmas.loop();  
       }  
       public void stop() {  
         
            christmas.stop();  
       }  
      
}  